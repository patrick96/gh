#compdef gh
# vim: set ft=zsh:

local state line ret=1

GH_FETCH_REPOS=${GH_FETCH_REPOS:-false}
GH_BASE_DIR=${GH_BASE_DIR:-$HOME/src}

_arguments -C \
    '1: :->user' \
    '2:: :->repo' && ret=0


case $state in 
    user)
        _users=($GITHUB[user])
        _users+=(${$(echo $GH_BASE_DIR/github.com/*):r:t})
        _users+=(${$(echo $GH_BASE_DIR/github.com/$GITHUB[user]/*):r:t})
        if [ ${#_users[@]} -gt 0 ]
        then
            _values 'users' $_users
            ret=0
        fi
        ;;
    repo)
        _repos=()
        user=$line[1]
        user_repo="gh_repos_$user"
        IFS=$'\n'
        if $GH_FETCH_REPOS = true && ( _cache_invalid $user_repo  || ! _retrieve_cache $user_repo ); then
            repos=$(curl --fail -s https://api.github.com/users/$user/repos\?sort=updated)
            _store_cache $user_repo repos
        else
            _retrieve_cache $user_repo
        fi
        IFS=$' '
        if [ -n "$repos" ] && command -v jsawk > /dev/null 2>&1
        then
            javascript='return this.reduce(function(prev, cur, curI, array) {return prev + "\n" + cur.name + "[" + (!cur.description? cur.name + " has no description" : cur.description) + "]";}, "")'
            _repos=(${(f)$(echo $repos | jsawk -a $javascript)})
        fi
        _local_repos=(${$(echo $GH_BASE_DIR/github.com/$user/*):r:t})
        for l in $_local_repos
        do
            exists=1
            for r in $_repos 
            do
                if [[ $r == "$l"* ]]
                then
                    exists=0
                    break 1
                fi
            done
            if [ $exists -ne 0 ]
            then
                _repos+=( "$l" )
            fi
        done

        if [ ${#_repos[@]} -gt 0 ]
        then
            _values 'repos' $_repos
            ret=0
        fi
        ;;
esac

return $ret
